//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class Capitalization: APIModel {

    /** Name of the pet
 */
    public var attName: String?

    public var capitalCamel: String?

    public var capitalSnake: String?

    public var sCAETHFlowPoints: String?

    public var smallCamel: String?

    public var smallSnake: String?

    public init(attName: String? = nil, capitalCamel: String? = nil, capitalSnake: String? = nil, sCAETHFlowPoints: String? = nil, smallCamel: String? = nil, smallSnake: String? = nil) {
        self.attName = attName
        self.capitalCamel = capitalCamel
        self.capitalSnake = capitalSnake
        self.sCAETHFlowPoints = sCAETHFlowPoints
        self.smallCamel = smallCamel
        self.smallSnake = smallSnake
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        attName = try container.decodeIfPresent("ATT_NAME")
        capitalCamel = try container.decodeIfPresent("CapitalCamel")
        capitalSnake = try container.decodeIfPresent("Capital_Snake")
        sCAETHFlowPoints = try container.decodeIfPresent("SCA_ETH_Flow_Points")
        smallCamel = try container.decodeIfPresent("smallCamel")
        smallSnake = try container.decodeIfPresent("small_Snake")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(attName, forKey: "ATT_NAME")
        try container.encodeIfPresent(capitalCamel, forKey: "CapitalCamel")
        try container.encodeIfPresent(capitalSnake, forKey: "Capital_Snake")
        try container.encodeIfPresent(sCAETHFlowPoints, forKey: "SCA_ETH_Flow_Points")
        try container.encodeIfPresent(smallCamel, forKey: "smallCamel")
        try container.encodeIfPresent(smallSnake, forKey: "small_Snake")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Capitalization else { return false }
      guard self.attName == object.attName else { return false }
      guard self.capitalCamel == object.capitalCamel else { return false }
      guard self.capitalSnake == object.capitalSnake else { return false }
      guard self.sCAETHFlowPoints == object.sCAETHFlowPoints else { return false }
      guard self.smallCamel == object.smallCamel else { return false }
      guard self.smallSnake == object.smallSnake else { return false }
      return true
    }

    public static func == (lhs: Capitalization, rhs: Capitalization) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
