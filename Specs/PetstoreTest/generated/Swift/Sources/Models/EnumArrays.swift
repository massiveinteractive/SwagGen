//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EnumArrays: APIModel {

    public enum ArrayEnum: String, Codable, Equatable, CaseIterable {
        case fish = "fish"
        case crab = "crab"
    }

    public enum JustSymbol: String, Codable, Equatable, CaseIterable {
        case greaterThanOrEqualTo = ">="
        case dollar = "$"
    }

    public var arrayEnum: [ArrayEnum]?

    public var justSymbol: JustSymbol?

    public init(arrayEnum: [ArrayEnum]? = nil, justSymbol: JustSymbol? = nil) {
        self.arrayEnum = arrayEnum
        self.justSymbol = justSymbol
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        arrayEnum = try container.decodeArrayIfPresent("array_enum")
        justSymbol = try container.decodeIfPresent("just_symbol")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(arrayEnum, forKey: "array_enum")
        try container.encodeIfPresent(justSymbol, forKey: "just_symbol")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EnumArrays else { return false }
      guard self.arrayEnum == object.arrayEnum else { return false }
      guard self.justSymbol == object.justSymbol else { return false }
      return true
    }

    public static func == (lhs: EnumArrays, rhs: EnumArrays) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
