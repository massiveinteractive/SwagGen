//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class Device: APIModel {

    /** The unique identifier for this device e.g. serial number. */
    public var id: String

    /** The human recognisable name for this device. */
    public var name: String

    /** The date this device was registered. */
    public var registrationDate: DateTime

    /** The device type e.g. web_browser. */
    public var type: String

    public init(id: String, name: String, registrationDate: DateTime, type: String) {
        self.id = id
        self.name = name
        self.registrationDate = registrationDate
        self.type = type
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        id = try container.decode("id")
        name = try container.decode("name")
        registrationDate = try container.decode("registrationDate")
        type = try container.decode("type")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(id, forKey: "id")
        try container.encode(name, forKey: "name")
        try container.encode(registrationDate, forKey: "registrationDate")
        try container.encode(type, forKey: "type")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Device else { return false }
      guard self.id == object.id else { return false }
      guard self.name == object.name else { return false }
      guard self.registrationDate == object.registrationDate else { return false }
      guard self.type == object.type else { return false }
      return true
    }

    public static func == (lhs: Device, rhs: Device) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
