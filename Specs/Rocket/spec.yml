openapi: 3.0.0
info:
  title: Rocket Services
  version: 1.0.0
  description: >
    An Orchestration Layer that takes ISL services and packages them in a more
    targeted way for front-end applications.

    This in turn makes client integration easier and reduces the complexity and size of front-end applications.


    Rocket is also customisable - allowing UI engineers to ‘remix’ the existing back-end services into something that

    best suits the application they are developing.
paths:
  /account:
    x-serviceId: account
    get:
      description: Get the details of an account along with the profiles and entitlements
        under it.
      operationId: getAccount
      tags:
        - account
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - accountAuth:
            - Catalog
    patch:
      description: >
        Update the details of an account.


        This supports partial updates so you can send just the properties you wish to update.
      operationId: updateAccount
      tags:
        - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountUpdateRequest"
        description: Updated account details.
        required: true
      responses:
        "204":
          description: OK
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - accountAuth:
            - Settings
  /account/devices:
    x-serviceId: device
    get:
      description: >
        Get all devices registered under this account.


        Also includes information around device registration and deregistration limits.
      operationId: getDevices
      tags:
        - account
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountDevices"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - accountAuth:
            - Catalog
    post:
      description: >
        Register a playback device under an account.


        If a device with the same id already exists a `409` conflict will be returned.
      operationId: registerDevice
      tags:
        - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeviceRegistrationRequest"
        description: Registration details for a new playback device.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "409":
          description: A device with the provided id already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - accountAuth:
            - Catalog
  "/account/devices/{id}":
    x-serviceId: device
    get:
      description: Get a registered device.
      operationId: getDevice
      tags:
        - account
      parameters:
        - name: id
          description: The unique identifier for the registered device e.g. serial number.
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Device"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - accountAuth:
            - Catalog
    delete:
      description: Deregister a playback device from an account.
      operationId: deregisterDevice
      tags:
        - account
      parameters:
        - name: id
          description: The unique identifier for the registered device e.g. serial number.
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Device deregistered.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - accountAuth:
            - Catalog
  "/account/devices/{id}/name":
    x-serviceId: device
    put:
      description: Rename a device
      operationId: renameDevice
      tags:
        - account
      parameters:
        - name: id
          description: The unique identifier for this registered device e.g. serial number.
          in: path
          required: true
          schema:
            type: string
        - name: name
          description: The new name for the device.
          in: query
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Device renamed.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - accountAuth:
            - Catalog
  /account/entitlements:
    x-serviceId: entitlement
    get:
      description: >
        Get all entitlements under the account.


        This list is returned under the call to get account information so a call here is

        only required when wishing to refresh a local copy of entitlements.
      operationId: getEntitlements
      tags:
        - account
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Entitlement"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - accountAuth:
            - Catalog
  "/account/items/{id}/videos":
    x-serviceId: media
    get:
      description: >
        Get the video files associated with an item given maximum resolution,
        device type

        and one or more delivery types.


        This endpoint accepts an Account Catalog token, however if when requesting

        playback files you receive an *403 status code with error code 1* then the file

        you're requesting is classification restricted. This means you should switch

        to target the `/account/items/{id}/videos-guarded` endpoint, passing it an Account

        Playback token. If not already obtained, this token can be requested via the

        `/authorization` endpoint with an account level pin.


        For convenience you may also access free / public files through this endpoint

        instead of the /items/{id}/videos endpoint, when authenticated.


        Returns an array of video file objects which each include a url to a video.


        The first entry in the array contains what is predicted to be the best match.

        The remainder of the entries, if any, may contain resolutions below what was

        requests. For example if you request HD-720 the response may also contain

        SD entries.


        If you specify multiple delivery types, then the response array will insert

        types in the order you specify them in the query. For example `stream,progressive`

        would return an array with 0 or more stream files followed by 0 or more progressive files.


        If no files are found a 404 is returned.
      operationId: getItemMediaFiles
      tags:
        - account
      parameters:
        - name: id
          description: The identifier of the item whose video files to load.
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/MediaFileDelivery"
        - $ref: "#/components/parameters/MediaFileResolution"
        - $ref: "#/components/parameters/Device"
        - $ref: "#/components/parameters/Subscription"
        - $ref: "#/components/parameters/Segments"
        - $ref: "#/components/parameters/FeatureFlags"
      responses:
        "200":
          description: |
            The list of video files available.
            The first entry containing what is predicted to be the best match.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MediaFile"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - accountAuth:
            - Catalog
  "/account/items/{id}/videos-guarded":
    x-serviceId: media
    get:
      description: >
        Get the video files associated with an item given maximum resolution,
        device type

        and one or more delivery types.


        This endpoint is identical to the `/account/items/{id}/videos` however it expects

        an Account Playback token. This token, and in association this endpoint, is specifically

        for use when playback files are classification restricted and require an account

        level pin to access them.


        Returns an array of video file objects which each include a url to a video.


        The first entry in the array contains what is predicted to be the best match.

        The remainder of the entries, if any, may contain resolutions below what was

        requests. For example if you request HD-720 the response may also contain

        SD entries.


        If you specify multiple delivery types, then the response array will insert

        types in the order you specify them in the query. For example `stream,progressive`

        would return an array with 0 or more stream files followed by 0 or more progressive files.


        If no files are found a 404 is returned.
      operationId: getItemMediaFilesGuarded
      tags:
        - account
      parameters:
        - name: id
          description: The identifier of the item whose video files to load.
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/MediaFileDelivery"
        - $ref: "#/components/parameters/MediaFileResolution"
        - $ref: "#/components/parameters/Device"
        - $ref: "#/components/parameters/Subscription"
        - $ref: "#/components/parameters/Segments"
        - $ref: "#/components/parameters/FeatureFlags"
      responses:
        "200":
          description: |
            The list of video files available.
            The first entry containing what is predicted to be the best match.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MediaFile"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - accountAuth:
            - Playback
  /account/password:
    x-serviceId: account
    put:
      description: Change the password of an account.
      operationId: changePassword
      tags:
        - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequest"
        description: The new account password.
        required: true
      responses:
        "204":
          description: OK
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - accountAuth:
            - Settings
  /account/pin:
    x-serviceId: account
    put:
      description: Change the pin of an account.
      operationId: changePin
      tags:
        - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePinRequest"
        description: The new account pin.
        required: true
      responses:
        "204":
          description: OK
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - accountAuth:
            - Settings
  /account/profile:
    x-serviceId: profile
    get:
      description: Get the details of the active profile, including watched, bookmarked and
        rated items.
      operationId: getProfile
      tags:
        - profile
      responses:
        "200":
          description: Details of the active profile.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileDetail"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - profileAuth:
            - Catalog
  /account/profile/bookmarks:
    x-serviceId: bookmark
    get:
      description: Get the map of bookmarked item ids (itemId => creationDate) under the
        active profile.
      operationId: getBookmarks
      tags:
        - profile
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                  format: date-time
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - profileAuth:
            - Catalog
  /account/profile/bookmarks/list:
    x-serviceId: bookmark
    get:
      description: Returns the list of bookmarked items under the active profile.
      operationId: getBookmarkList
      tags:
        - profile
      parameters:
        - name: page
          description: The page of items to load. Starts from page 1.
          in: query
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: page_size
          description: The number of items to return in a page.
          in: query
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
        - $ref: "#/components/parameters/ListOrder"
        - $ref: "#/components/parameters/ItemType"
        - $ref: "#/components/parameters/Device"
        - $ref: "#/components/parameters/Subscription"
        - $ref: "#/components/parameters/Segments"
        - $ref: "#/components/parameters/FeatureFlags"
      responses:
        "200":
          description: The list of items requested.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - profileAuth:
            - Catalog
  "/account/profile/bookmarks/{itemId}":
    x-serviceId: bookmark
    get:
      description: Get the bookmark for an item under the active profile.
      operationId: getItemBookmark
      tags:
        - profile
      parameters:
        - name: itemId
          in: path
          description: The id of the item to get the bookmark for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bookmark"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - profileAuth:
            - Catalog
    put:
      description: |
        Bookmark an item under the active profile.

        Creates one if it doesn't exist, overwrites one if it does.
      operationId: bookmarkItem
      tags:
        - profile
      parameters:
        - name: itemId
          in: path
          description: The id of the item to bookmark.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Bookmark created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bookmark"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - profileAuth:
            - Catalog
    delete:
      description: Unbookmark an item under the active profile.
      operationId: deleteItemBookmark
      tags:
        - profile
      parameters:
        - name: itemId
          in: path
          description: The identifier of the bookmark to delete.
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Bookmark deleted.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - profileAuth:
            - Catalog
  /account/profile/ratings:
    x-serviceId: userRating
    get:
      description: Get the map of rated item ids (itemId => rating out of 10) under the
        active profile.
      operationId: getRatings
      tags:
        - profile
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - profileAuth:
            - Catalog
  /account/profile/ratings/list:
    x-serviceId: userRating
    get:
      description: Returns the list of rated items under the active profile.
      operationId: getRatingsList
      tags:
        - profile
      parameters:
        - name: page
          description: The page of items to load. Starts from page 1.
          in: query
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 1
        - name: page_size
          description: The number of items to return in a page.
          in: query
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
            default: 12
        - $ref: "#/components/parameters/ListOrder"
        - name: order_by
          description: >
            What to order by.


            Ordering by `date-modified` equates to ordering by the last rated date.
          in: query
          schema:
            type: string
            enum:
              - date-added
              - date-modified
            default: date-added
        - $ref: "#/components/parameters/ItemType"
        - $ref: "#/components/parameters/Device"
        - $ref: "#/components/parameters/Subscription"
        - $ref: "#/components/parameters/Segments"
        - $ref: "#/components/parameters/FeatureFlags"
      responses:
        "200":
          description: The list of items requested.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - profileAuth:
            - Catalog
  "/account/profile/ratings/{itemId}":
    x-serviceId: userRating
    get:
      description: Get the rating info for an item under the active profile.
      operationId: getItemRating
      tags:
        - profile
      parameters:
        - name: itemId
          description: The id of the item to get the rating info for.
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRating"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - profileAuth:
            - Catalog
    put:
      description: |
        Rate an item under the active profile.

        Creates one if it doesn't exist, overwrites one if it does.
      operationId: rateItem
      tags:
        - profile
      parameters:
        - name: itemId
          description: The id of the item to rate.
          in: path
          required: true
          schema:
            type: string
        - name: rating
          description: The item rating between 1 and 10 inclusive.
          in: query
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 10
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRating"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - profileAuth:
            - Catalog
  /account/profile/watched:
    x-serviceId: watched
    get:
      description: Get the map of watched item ids (itemId => last playhead position) under
        the active profile.
      operationId: getWatched
      tags:
        - profile
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/Watched"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - profileAuth:
            - Catalog
  /account/profile/watched/list:
    x-serviceId: watched
    get:
      description: Returns the list of watched items under the active profile.
      operationId: getWatchedList
      tags:
        - profile
      parameters:
        - name: page
          description: The page of items to load. Starts from page 1.
          in: query
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 1
        - name: page_size
          description: The number of items to return in a page.
          in: query
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
            default: 12
        - $ref: "#/components/parameters/ListOrder"
        - name: order_by
          description: >
            What to order by.


            Ordering by `date-modified` equates to ordering by the last watched date.
          in: query
          schema:
            type: string
            enum:
              - date-added
              - date-modified
            default: date-added
        - $ref: "#/components/parameters/ItemType"
        - $ref: "#/components/parameters/Device"
        - $ref: "#/components/parameters/Subscription"
        - $ref: "#/components/parameters/Segments"
        - $ref: "#/components/parameters/FeatureFlags"
      responses:
        "200":
          description: The list of items requested.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - profileAuth:
            - Catalog
  "/account/profile/watched/{itemId}":
    x-serviceId: watched
    get:
      description: Get the watched status info for an item under the active profile.
      operationId: getItemWatchedStatus
      tags:
        - profile
      parameters:
        - name: itemId
          in: path
          description: The id of the item to get the watched status for.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Watched"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - profileAuth:
            - Catalog
    put:
      description: >
        Record the watched playhead position of a video under the active
        profile.


        Can be used later to resume a video from where it was last watched.


        Creates one if it doesn't exist, overwrites one if it does.
      operationId: setItemWatchedStatus
      tags:
        - profile
      parameters:
        - name: itemId
          description: The id of the item being watched.
          in: path
          required: true
          schema:
            type: string
        - name: position
          description: The playhead position to record.
          in: query
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Watched"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - profileAuth:
            - Catalog
  /account/profiles:
    x-serviceId: profile
    post:
      description: Create a new profile under the active account.
      operationId: createProfile
      tags:
        - account
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProfileCreationRequest"
        description: Profile details.
        required: true
      responses:
        "201":
          description: Details of the created profile.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileDetail"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - accountAuth:
            - Catalog
  "/account/profiles/{id}":
    x-serviceId: profile
    get:
      description: Get the summary of a profile with a specific id under the active account.
      operationId: getProfileWithId
      tags:
        - account
      parameters:
        - name: id
          description: The identifier of the profile to return.
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileSummary"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - accountAuth:
            - Catalog
    patch:
      description: >
        Update the summary of a profile with a specific id under the active
        account.


        This supports partial updates so you can send just the properties you wish to update.
      operationId: updateProfileWithId
      tags:
        - account
      parameters:
        - name: id
          description: The identifier of the profile to update.
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProfileUpdateRequest"
        description: Updated profile details.
        required: true
      responses:
        "204":
          description: Profile updated.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - accountAuth:
            - Catalog
    delete:
      description: |
        Delete a profile with a specific id under the active account.

        Note that you cannot delete the primary profile.
      operationId: deleteProfileWithId
      tags:
        - account
      parameters:
        - name: id
          description: The identifier of the profile to delete.
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Profile deleted.
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - accountAuth:
            - Catalog
  /account/request-email-verification:
    x-serviceId: account
    post:
      description: >
        Request that the email address tied to an account be verified.


        This will send a verification email to the email address of the primary profile containing

        a link which, once clicked, completes the verification process via the /verify-email endpoint.


        Note that when an account is created this email is sent automatically so there's no need

        to call this directly.


        If the user doesn't click the link before it expires then this endpoint can be called

        to request a new verification email. In the future it may also be used if we add support

        for changing an account email address.
      operationId: requestEmailVerification
      tags:
        - account
      responses:
        "204":
          description: OK
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - accountAuth:
            - Catalog
  /authorization:
    x-serviceId: auth
    post:
      description: >
        Request one or more `Account` level authorization tokens each with a
        chosen scope.


        Tokens are used to access restricted service endpoints. These restricted endpoints

        will require a specific token type (e.g Account) with a specific scope (e.g. Catalog)

        before access is granted.


        For convenience, where a Profile level token with the same scope exists it will also be returned.

        This removes the need to prompt a user for a password on login followed directly with a

        pin prompt for a profile token of the same scope.


        Where an Account level pin is supported, some tokens may be returned from this endpoint

        by providing this pin instead of a password. For example the `Playback` scoped Account

        token is one such type.


        Any token which is returnable with an Account pin will also be returnable with the

        Account password. On the inverse, not all scoped tokens that are returnable via password

        will be returnable via the pin. For example when you log in you receive an Account Catalog

        token. This is not obtainable from an Account pin, only password.


        If both a pin and password are supplied only the password will be used.


        If neither a pin or password are supplied an http 400 error will be returned.
      operationId: getAccountToken
      tags:
        - authorization
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountTokenRequest"
        description: The account credentials with requested token scope.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                additionalProperties: false
                items:
                  $ref: "#/components/schemas/AccessToken"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
    delete:
      description: |
        When a user signs out of an application we need to clear some
        basic cookies we assigned them during token authorization.
      operationId: signOut
      tags:
        - authorization
      responses:
        "204":
          description: OK
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
  /authorization/profile:
    x-serviceId: auth
    post:
      description: >
        Request one or more `Profile` level authorization tokens each with a
        chosen scope.


        Tokens are used to access restricted service endpoints. These restriced endpoints

        will require a specific token type (e.g Profile) with a specific scope (e.g. Catalog)

        before access is granted.
      operationId: getProfileToken
      tags:
        - authorization
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProfileTokenRequest"
        description: The profile id and optional pin with required token scope.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                additionalProperties: false
                items:
                  $ref: "#/components/schemas/AccessToken"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - accountAuth:
            - Catalog
  /authorization/refresh:
    x-serviceId: auth
    post:
      description: Refresh an account or profile level authorization token which is marked
        as refreshable.
      operationId: refreshToken
      tags:
        - authorization
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenRefreshRequest"
        description: The token to refresh.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessToken"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
  /config:
    x-serviceId: config
    get:
      description: >
        Get the global configuration for an application. Should be called during
        app statup.


        This includes things like device and playback rules, classifications,

        sitemap and subscriptions.


        You have the option to select specific configuration objects using the 'include'

        parameter, or if unspecified, getting all configuration.
      operationId: getAppConfig
      tags:
        - app
      parameters:
        - name: include
          description: |
            A comma delimited list of config objects to return.
            If none specified then all configuration is returned.
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - classification
                - playback
                - sitemap
                - navigation
                - subscription
                - general
        - $ref: "#/components/parameters/Device"
        - $ref: "#/components/parameters/Subscription"
        - $ref: "#/components/parameters/Segments"
        - $ref: "#/components/parameters/FeatureFlags"
      responses:
        "200":
          description: The list of available pages
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppConfig"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
  "/items/{id}":
    x-serviceId: item
    get:
      description: Returns the details of an item with the specified id.
      operationId: getItem
      tags:
        - content
      parameters:
        - name: id
          in: path
          description: >
            The identifier of the item to load.


            The custom identifier of an item can be used here if the `use_custom_id` parameter is true.
          required: true
          schema:
            type: string
        - name: max_rating
          in: query
          description: The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'.
          schema:
            type: string
        - name: expand
          description: >
            If no value is specified no dependencies are expanded.


            If 'children' is specified then the list of any direct children will be expanded. For example

            seasons of a show or episodes of a season.


            If 'all' is specified then the parent chain will be expanded along with any child list at each level.

            For example if an episode is specified then its season will be expanded and that season's episode list.

            The season will have its show expanded and the show will have its season list expanded.


            The 'all' options is useful when you deep link into a show/season/episode for the first time as

            it provides full context for navigating around the show page. Subsequent navigation around

            children of the show should only need to request expand of children.


            If an expand is specified which is not relevant to the item type, it will be ignored.
          in: query
          schema:
            type: string
            enum:
              - all
              - children
        - name: select_season
          in: query
          description: >
            Given a provided show id, it can be useful to get the details of a
            child season. This option

            provides a means to return the `first` or `latest` season of a show given the show id.


            The `expand` parameter also works here so for example you could land on a show page and request the

            latest season along with `expand=all`. This would then return the detail of the latest season with

            its list of child episode summaries, and also expand the detail of the show with its list of seasons summaries.


            Note the `id` parameter must be a show id for this parameter to work correctly.
          schema:
            type: string
            enum:
              - first
              - latest
        - name: use_custom_id
          description: Set to true when passing a custom Id as the `id` path parameter.
          in: query
          schema:
            type: boolean
        - $ref: "#/components/parameters/Device"
        - $ref: "#/components/parameters/Subscription"
        - $ref: "#/components/parameters/Segments"
        - $ref: "#/components/parameters/FeatureFlags"
      responses:
        "200":
          description: The item requested
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemDetail"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
  "/items/{id}/children":
    x-serviceId: itemChildList
    get:
      description: >
        Returns the List of child summary items under an item.


        If the item is a Season then the children will be episodes and ordered by episode number.


        If the item is a Show then the children will be Seasons and ordered by season number.


        Returns 404 if no children found.
      operationId: getItemChildrenList
      tags:
        - content
      parameters:
        - name: id
          description: The identifier of the item whose children to load.
          in: path
          required: true
          schema:
            type: string
        - name: page
          description: The page of items to load. Starts from page 1.
          in: query
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 1
        - name: page_size
          description: The number of items to return in a page.
          in: query
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 12
        - name: max_rating
          in: query
          description: The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'.
          schema:
            type: string
        - $ref: "#/components/parameters/ListOrder"
        - $ref: "#/components/parameters/Device"
        - $ref: "#/components/parameters/Subscription"
        - $ref: "#/components/parameters/Segments"
        - $ref: "#/components/parameters/FeatureFlags"
      responses:
        "200":
          description: The list of items requested.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
  "/items/{id}/related":
    x-serviceId: itemRelatedList
    get:
      description: >
        Returns the list of items related to the parent item.


        Note for now, due to the size of the list being unknown, only a single page will be returned.
      operationId: getItemRelatedList
      tags:
        - content
      parameters:
        - name: id
          required: true
          in: path
          description: The identifier of the item to based related items off.
          schema:
            type: string
        - name: page
          description: The page of items to load. Starts from page 1.
          in: query
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 1
        - name: page_size
          description: The number of items to return in a page.
          in: query
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 12
        - name: max_rating
          in: query
          description: The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'.
          schema:
            type: string
        - $ref: "#/components/parameters/Device"
        - $ref: "#/components/parameters/Subscription"
        - $ref: "#/components/parameters/Segments"
        - $ref: "#/components/parameters/FeatureFlags"
      responses:
        "200":
          description: The list of items requested.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
  "/items/{id}/videos":
    x-serviceId: media
    get:
      description: >
        Get the free / public video files associated with an item given maximum
        resolution,

        device type and one or more delivery types.


        Returns an array of video file objects which each include a url to a video.


        The first entry in the array contains what is predicted to be the best match.

        The remainder of the entries, if any, may contain resolutions below what was

        requests. For example if you request HD-720 the response may also contain

        SD entries.


        If you specify multiple delivery types, then the response array will insert

        types in the order you specify them in the query. For example `stream,progressive`

        would return an array with 0 or more stream files followed by 0 or more progressive files.


        If no files are found a 404 is returned.
      operationId: getPublicItemMediaFiles
      tags:
        - content
      parameters:
        - name: id
          description: The identifier of the item whose video files to load.
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/MediaFileDelivery"
        - $ref: "#/components/parameters/MediaFileResolution"
        - $ref: "#/components/parameters/Device"
        - $ref: "#/components/parameters/Subscription"
        - $ref: "#/components/parameters/Segments"
        - $ref: "#/components/parameters/FeatureFlags"
      responses:
        "200":
          description: |
            The list of video files available.
            The first entry containing what is predicted to be the best match.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MediaFile"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
  /lists:
    x-serviceId: list
    get:
      description: Returns an array of item lists with their first page of content resolved.
      operationId: getLists
      tags:
        - content
      parameters:
        - name: ids
          description: >
            A comma delimited list of item list identifiers.


            These can be list ids e.g. `14354,65473,3234`


            Or more complex sort/filter queries using pipes e.g.


            `14354|max_rating=AUOFLC-E|order=asc|order_by=year-added,65473|page_size=30,3234`


            _Note the id must always come first for each encoded list query_


            List parameters may be provide without the `param=` prefix e.g. `14354|genre:action`


            Only the following options can be present.
              - `order`
              - `order_by`
              - `max_rating`
              - `page_size`
              - `item_type`
              - `param`
          in: query
          required: true
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: page_size
          description: The number of items to return in a page.
          in: query
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 12
        - name: max_rating
          description: The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/ListOrder"
        - $ref: "#/components/parameters/ListOrderBy"
        - $ref: "#/components/parameters/ItemType"
        - $ref: "#/components/parameters/Device"
        - $ref: "#/components/parameters/Subscription"
        - $ref: "#/components/parameters/Segments"
        - $ref: "#/components/parameters/FeatureFlags"
      responses:
        "200":
          description: The array of item lists requested.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ItemList"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
  "/lists/{id}":
    x-serviceId: list
    get:
      description: Returns a list of items under the specified item list
      operationId: getList
      tags:
        - content
      parameters:
        - name: id
          description: The identifier of the list to load.
          in: path
          required: true
          schema:
            type: string
        - name: page
          description: The page of items to load. Starts from page 1.
          in: query
          schema:
            type: integer
            format: int32
            minimum: 1
            default: 1
        - name: page_size
          description: The number of items to return in a page.
          in: query
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 12
        - name: max_rating
          description: The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/ListOrder"
        - $ref: "#/components/parameters/ListOrderBy"
        - name: param
          description: The list parameter in format 'key:value', e.g. 'genre:action'.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/ItemType"
        - $ref: "#/components/parameters/Device"
        - $ref: "#/components/parameters/Subscription"
        - $ref: "#/components/parameters/Segments"
        - $ref: "#/components/parameters/FeatureFlags"
      responses:
        "200":
          description: The list of items requested.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemList"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
  /page:
    x-serviceId: page
    get:
      description: >
        Returns a page with the specified id.


        If targeting the search page you must url encode the search term as a parameter

        using the `q` key. For example if your browser path looks like `/search?q=the`

        then what you pass to this endpoint would look like `/page?path=/search%3Fq%3Dthe`.
      operationId: getPage
      tags:
        - app
      parameters:
        - name: path
          description: The path of the page to load, e.g. '/movies'.
          in: query
          required: true
          schema:
            type: string
        - name: list_page_size
          description: The number of items to load when prefetching and paging each list in
            the page row.
          in: query
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 12
        - name: list_page_size_large
          description: >
            The number of items to load when prefetching a continuous scroll
            list entry in a page.


            By default any list page entry with template pattern `/^CS\d+$/` will

            be considered a continuous scroll list.
          in: query
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 50
        - name: max_list_prefetch
          description: The maximum number of lists to prefetch in the page.
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 15
            default: 2
        - name: item_detail_expand
          description: >
            Only relevant when loading item detail pages as these embed a
            detailed item in the main page entry.


            If no value is specified no item dependencies are expanded.


            If 'children' is specified then the list of any direct children will be expanded. For example

            seasons of a show or episodes of a season.


            If 'all' is specified then the parent chain will be expanded along with any child list at each level.

            For example if an episode is specified then its season will be expanded and that season's episode list.

            The season will have its show expanded and the show will have its season list expanded.


            The 'all' options is useful when you deep link into a show/season/episode for the first time as

            it provides full context for navigating around the show page. Subsequent navigation around

            children of the show should only need to request expand of children.


            If an expand is specified which is not relevant to the item type, it will be ignored.
          in: query
          schema:
            type: string
            enum:
              - all
              - children
        - name: item_detail_select_season
          description: >
            Only relevant when loading show detail pages as these embed a
            detailed item in the main page entry.


            Given a targeted show page, it can be useful to get the details of a child season. This option

            provides a means to return the `first` or `latest` season of a show embedded in the page.


            The `expand` parameter also works here so for example you could land on a show page and request the

            `item_detail_select_season=latest` along with `item_detail_expand=all`. This would then return the

            detail of the latest season with its list of child episode summaries, and also expand

            the detail of the show with its list of seasons summaries.
          in: query
          schema:
            type: string
            enum:
              - first
              - latest
        - name: text_entry_format
          description: |
            Only relevant to page entries of type `TextEntry`.

            Converts the value of a text page entry to the specified format.
          in: query
          schema:
            type: string
            enum:
              - markdown
              - html
            default: markdown
        - name: max_rating
          description: The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/Device"
        - $ref: "#/components/parameters/Subscription"
        - $ref: "#/components/parameters/Segments"
        - $ref: "#/components/parameters/FeatureFlags"
      responses:
        "200":
          description: The page requested.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Page"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
  "/plans/{id}":
    x-serviceId: subscription
    get:
      description: Returns the details of a Plan with the specified id.
      operationId: getPlan
      tags:
        - content
      parameters:
        - name: id
          in: path
          description: The identifier of the Plan to load.
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/Device"
        - $ref: "#/components/parameters/Subscription"
        - $ref: "#/components/parameters/Segments"
        - $ref: "#/components/parameters/FeatureFlags"
      responses:
        "200":
          description: The Plan requested.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plan"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
  /register:
    x-serviceId: registration
    post:
      description: >
        Register a new user, creating them an account.


        Registration, when successful, will return an array of access tokens so the user is

        immediately signed in.


        It returns Catalog and Commerce scoped tokens for both Account and Profile.

        The Commerce ones are intended to allow the purchase of a subscription plan

        in the step after registration, without the user being prompted to enter

        their username and password again.


        An email will also be sent with a link they need to click to confirm their

        email address. This confirmation is done via the /verify-email endpoint.
      operationId: register
      tags:
        - registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationRequest"
        description: Registration details.
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                additionalProperties: false
                items:
                  $ref: "#/components/schemas/AccessToken"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
  /request-password-reset:
    x-serviceId: support
    post:
      description: >
        Request the password of an account's primary profile be reset.


        Should be called when a user has forgotten their password.


        This will send an email with a password reset link to the email address of the

        primary profile of an account.


        The link, once clicked, should take the user to the "reset-password" page of the

        website. Here they will enter their new password and submit to the /reset-password

        endpoint here, along with the password reset token provided in the original link.
      operationId: forgotPassword
      tags:
        - support
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetEmailRequest"
        description: Email address of account to request a password reset on.
        required: true
      responses:
        "204":
          description: OK
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
  /reset-password:
    x-serviceId: support
    post:
      description: >
        When a user requests to reset their password via the
        /request-password-reset endpoint, an

        email is sent to the email address of the primary profile of the account. This email contains a link

        with a token as query parameter. The link should takes the user to the "reset-password"

        page of the website.


        From the reset-password page a user should enter their primary account email address

        and the new password they wish to use. These should then be submitted to this endpoint,

        along with the token from the email link. The token should be provided in the authorization

        header as a bearer token.
      operationId: resetPassword
      tags:
        - support
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetRequest"
        description: Account email and new password.
        required: true
      responses:
        "204":
          description: OK
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - resetPasswordAuth:
            []
  /schedules:
    x-serviceId: schedule
    get:
      description: >
        Returns schedules for a defined set of channels over a requested period.


        Schedules are requested in hour blocks and returned grouped by the channel

        they belong to.


        For example, to load 12 hours of schedules for channels `4343` and `5234`,

        on 21/2/2017 starting from 08:00.


        ```

        channels=4343,5234

        date=2017-02-21

        hour=8

        x=12

        ```


        If a channel id is passed which doesn't exist then this endpoint will

        return an empty schedule list for it. If instead we returned 404,

        this would invalidate all other channel schedules in the same request

        which would be unfriendly for clients presenting these channel schedules.
      operationId: getSchedules
      tags:
        - content
      parameters:
        - name: channels
          description: The list of channel ids to get schedules for.
          in: query
          required: true
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: date
          description: |
            The date to target in ISO format, e.g. `2017-05-23`.

            The base hour requested will belong to this date.
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: hour
          description: >
            The base hour in the day, defined by the `date` parameter, you wish
            to load schedules for.


            From 0 to 23, where 0 is midnight.
          in: query
          required: true
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 23
        - name: duration
          description: >
            The number of hours of schedules to load from the base `hour`
            parameter.


            This may be negative or positive depending on whether you want to load past or future schedules.


            A value of zero is invalid.
          in: query
          required: true
          schema:
            type: integer
            format: int32
            minimum: -24
            maximum: 24
        - $ref: "#/components/parameters/Device"
        - $ref: "#/components/parameters/Subscription"
        - $ref: "#/components/parameters/Segments"
        - $ref: "#/components/parameters/FeatureFlags"
      responses:
        "200":
          description: >
            An array of schedule lists for each channel requested.


            The order of the channels will match the order of channel ids passed during the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ItemScheduleList"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
  /search:
    x-serviceId: search
    get:
      description: Search the catalog of items and people.
      operationId: search
      tags:
        - content
      parameters:
        - name: term
          description: The search term to query.
          in: query
          required: true
          schema:
            type: string
        - name: include
          description: |
            By default people, movies and tv (shows + programs) will be included
            in the search results.

            If you don't want all of these types you can specifiy the specific
            includes you care about.
          in: query
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - tv
                - movies
                - people
        - name: group
          description: >
            When this option is set, instead of all search result items being
            returned

            in a single list, they will instead be returned under two lists. One for

            movies and another for tv (shows + programs).


            Default is undefined meaning items will be returned in a single list.


            The array of `people` results will alway be separate from items.
          in: query
          schema:
            type: boolean
        - name: max_results
          description: The maximum number of results to return.
          in: query
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
            default: 20
        - name: max_rating
          description: The maximum rating (inclusive) of items returned, e.g. 'auoflc-pg'.
          in: query
          schema:
            type: string
        - $ref: "#/components/parameters/Device"
        - $ref: "#/components/parameters/Subscription"
        - $ref: "#/components/parameters/Segments"
        - $ref: "#/components/parameters/FeatureFlags"
      responses:
        "200":
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResults"
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
  /verify-email:
    x-serviceId: support
    post:
      description: >
        When an account is created an email is sent to the email address of the
        new account.

        This contains a link, which once clicked, verifies the email address of the account is correct.


        The link contains a token as a query parameter which should be passed as the authorization

        bearer token to this endpoint to complete email verification.


        The token has en expiry, so if the link is not clicked before it expires, the account holder

        may need to request a new verification email be sent. This can be done via the endpoint

        /account/request-email-verification.
      operationId: verifyEmail
      tags:
        - support
      responses:
        "204":
          description: OK
        "400":
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "401":
          description: Invalid access token.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "403":
          description: Forbidden.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "404":
          description: Not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
        default:
          description: Service error.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceError"
      security:
        - verifyEmailAuth:
            []
servers:
  - url: /
components:
  parameters:
    Device:
      name: device
      description: The type of device the content is targeting.
      in: query
      schema:
        type: string
        default: web_browser
    FeatureFlags:
      name: ff
      description: >
        The set of opt in feature flags which cause breaking changes to
        responses.


        While Rocket APIs look to avoid breaking changes under the active major version, the formats of responses

        may need to evolve over this time.


        These feature flags allow clients to select which response formats they expect and avoid breaking

        clients as these formats evolve under the current major version.


        ### Flags


        - `all` - Enable all flags. Useful for testing. _Don't use in production_.

        - `idp` - Dynamic item detail pages with schedulable rows.

        - `ldp` - Dynamic list detail pages with schedulable rows.


        See the `feature-flags.md` for available flag details.
      in: query
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - all
            - idp
            - ldp
    ItemType:
      name: item_type
      description: The item type to filter by. Defaults to unspecified.
      in: query
      enumEmoji:
        movie: 🎬
        show: 📺
        season: 📺
        episode: 📺
        program: 🎟
        link: 🔗
        trailer: 🖥
        channel: 📺
      schema:
        type: string
        enum:
          - movie
          - show
          - season
          - episode
          - program
          - link
          - trailer
          - channel
    ListOrder:
      name: order
      description: The list sort order, either 'asc' or 'desc'.
      in: query
      schema:
        type: string
        enum:
          - asc
          - desc
        default: desc
    ListOrderBy:
      name: order_by
      description: What to order by.
      in: query
      schema:
        type: string
        enum:
          - a-z
          - release-year
          - date-added
    MediaFileDelivery:
      name: delivery
      description: The video delivery type you require.
      in: query
      required: true
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
          enum:
            - stream
            - progressive
            - download
    MediaFileResolution:
      name: resolution
      description: The maximum resolution the device to playback the media can present.
      required: true
      in: query
      schema:
        type: string
        enum:
          - HD-1080
          - HD-720
          - SD
    Segments:
      name: segments
      description: The list of segments to filter the response by.
      in: query
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    Subscription:
      name: sub
      description: The active subscription code.
      in: query
      schema:
        type: string
  securitySchemes:
    accountAuth:
      type: oauth2
      description: Account JWT token
      flows:
        password:
          tokenUrl: /account/authorization
          scopes:
            Catalog: Access all read only content
            Commerce: Perform account level transactions
            Settings: Modify account settings
            Playback: Allow playback of restricted content
    profileAuth:
      type: oauth2
      description: Profile JWT token
      flows:
        password:
          tokenUrl: /account/profile/authorization
          scopes:
            Catalog: Modify profile preferences and activity (bookmarks, watch list)
    resetPasswordAuth:
      type: apiKey
      name: authorization
      in: header
    verifyEmailAuth:
      type: apiKey
      name: authorization
      in: header
  schemas:
    AccessToken:
      emoji: 🔑
      type: object
      required:
        - value
        - refreshable
        - expirationDate
        - type
      additionalProperties: false
      properties:
        value:
          description: The token value used for authenticated requests.
          type: string
        refreshable:
          description: True if this token can be refreshed, false if not.
          type: boolean
        expirationDate:
          description: The timestamp this token expires.
          type: string
          format: date-time
        type:
          description: The type of the token.
          type: string
          enum:
            - UserAccount
            - UserProfile
    Account:
      emoji: 👤
      type: object
      required:
        - id
        - email
        - trackingEnabled
        - pinEnabled
        - marketingEnabled
        - primaryProfileId
        - subscriptionCode
        - profiles
      additionalProperties: false
      properties:
        id:
          description: The id of the account.
          type: string
        email:
          description: The email address belonging to the account.
          type: string
        firstName:
          description: The first name of the account holder.
          type: string
        lastName:
          description: The last name of the account holder.
          type: string
        trackingEnabled:
          description: Whether usage tracking is associated with the account or anonymous.
          type: boolean
        pinEnabled:
          description: When an account level pin is defined this will be true.
          type: boolean
        marketingEnabled:
          type: boolean
          description: Whether the account has opted in or out of marketing material.
        primaryProfileId:
          description: The id of the primary profile.
          type: string
        usedFreeTrial:
          description: Whether the account has used up their free trial period of a plan.
          type: boolean
        minRatingPlaybackGuard:
          description: >
            The classification rating defining the minimum rating level a user
            should be

            forced to enter the account pin code for playback. Anything at this rating

            level or above will require the pin for playback.


            e.g. AUOFLC-MA15+


            If you want to disable this guard pass an empty string or `null`.
          type: string
        defaultPaymentInstrumentId:
          description: The id of the payment instrument to use by default for account
            transactions.
          type: string
        subscriptions:
          description: The list of subscriptions, if any, the account has signed up to.
          type: array
          items:
            $ref: "#/components/schemas/Subscription"
        subscriptionCode:
          description: >
            The active subscription code for an account.


            The value of this should be passed to any endpoints accepting a `sub` query parameter.
          type: string
        profiles:
          description: The list of profiles under this account.
          type: array
          items:
            $ref: "#/components/schemas/ProfileSummary"
        entitlements:
          description: The list of entitlements to playback specific items.
          type: array
          items:
            $ref: "#/components/schemas/Entitlement"
    AccountDevices:
      type: object
      required:
        - devices
        - maxRegistered
      additionalProperties: false
      properties:
        devices:
          description: The array of registered playack devices.
          type: array
          items:
            $ref: "#/components/schemas/Device"
        maxRegistered:
          description: |
            The maximum number of playback devices that can be registered
            under an account at a single time.

            If there is no maximum defined this value will be `-1`.
          type: integer
          format: int32
        registrationWindow:
          $ref: "#/components/schemas/DeviceRegistrationWindow"
          description: |
            Defines the start and end date of the current registration window along with calculated limits.
      
            If undefined then there are no registration limits for a period.
      
            For example given a registration period of 30 days, this sliding window will start on the
            oldest registration of the last 30 days, and end 30 days from that registration date.
      
            In this window there is a limit on how many devices can be registered in 30 days.
            If exceeded then no more devices can be registered unless one is deregistered or the
            oldest registration drops off the 30 day window.
      
            Deregistration also has potential limits which may prevent a device being deregistered.
            In this case the user must wait until the oldest deregistered device is more than 30
            days old.
        deregistrationWindow:
          $ref: "#/components/schemas/DeviceRegistrationWindow"
          description: |
            Defines the start and end date of the current deregistration window along with calculated limits.
      
            If undefined then there are no deregistration limits for a period.
      
            For example given a deregistration period of 30 days, this sliding window will start on the
            oldest deregistration of the last 30 days, and end 30 days from that deregistration date.
      
            In this window there is a limit on how many devices can be deregistered in 30 days.
            If exceeded then no more devices can be deregistered unless the oldest deregistration drops
            off the 30 day window.
    AccountTokenRequest:
      type: object
      required:
        - email
        - scopes
      additionalProperties: false
      properties:
        email:
          description: The email associated with the account.
          type: string
        password:
          description: >
            The password associated with the account.


            Either a pin or password should be supplied. If both are supplied the password will take precedence.
          type: string
        pin:
          description: >
            The pin associated with the account.


            Either a pin or password should be supplied. If both are supplied the password will take precedence.
          type: string
        scopes:
          description: >
            The scope(s) of the tokens required.

            For each scope listed an Account and Profile token of that scope will be returned
          type: array
          items:
            type: string
            enum:
              - Catalog
              - Commerce
              - Settings
              - Playback
        cookieType:
          description: >
            If you specify a cookie type then a content filter cookie will be
            returned

            along with the token(s). This is only really intended for web based clients which

            need to pass the cookies to a server to render a page based on the users

            content filters, e.g subscription code.


            If type `Session` the cookie will be session based.

            If type `Persistent` the cookie will have a medium term lifespan.

            If undefined no cookies will be set.
          type: string
          enum:
            - Session
            - Persistent
      example:
        email: ""
        password: ""
        pin: ""
        scopes:
          - Catalog
    AccountUpdateRequest:
      type: object
      additionalProperties: false
      properties:
        firstName:
          description: The first name of the account holder.
          type: string
        lastName:
          description: The last name of the account holder.
          type: string
        trackingEnabled:
          description: Whether usage tracking is associated with an account or anonymous.
          type: boolean
        defaultPaymentInstrumentId:
          description: The id of the payment instrument to use by default for account
            transactions.
          type: string
        minRatingPlaybackGuard:
          description: >
            The classification rating defining the minimum rating level a user
            should be

            forced to enter the account pin code for playback. Anything at this rating

            level or above will require the pin for playback.


            e.g. AUOFLC-MA15+


            If you want to disable this guard pass an empty string or `null`.
          type: string
    AppConfig:
      emoji: ⚙️
      type: object
      additionalProperties: false
      properties:
        classification:
          description: The map of classification ratings.
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Classification"
        subscription:
          $ref: "#/components/schemas/AppConfigSubscription"
        playback:
          $ref: "#/components/schemas/AppConfigPlayback"
        general:
          $ref: "#/components/schemas/AppConfigGeneral"
        navigation:
          $ref: "#/components/schemas/Navigation"
        sitemap:
          type: array
          items:
            $ref: "#/components/schemas/PageSummary"
    AppConfigGeneral:
      type: object
      additionalProperties: false
      properties:
        websiteUrl:
          description: The url of the primary website.
          type: string
          format: uri
        gaToken:
          description: A Google Analytics token to track applicaton user events.
          type: string
        stripeKey:
          description: The public Stripe key to use for payment transactions.
          type: string
        itemImageTypes:
          description: A map of default item image types where the key is the item types.
          type: object
          additionalProperties:
            type: string
        currencyCode:
          description: The currency code to target.
          type: string
        customFields:
          description: A map of custom configuration fields.
          type: object
          additionalProperties: true
    AppConfigPlayback:
      type: object
      required:
        - heartbeatFrequency
        - viewEventPoints
      additionalProperties: false
      properties:
        heartbeatFrequency:
          description: How often a heartbeat should be renewed during playback.
          type: integer
          format: int32
        viewEventPoints:
          description: >
            An array of percentage points in which to fire off plabyack view
            events.

            For example a value of 0.5 would indicate that an event should be

            fired when the user is half way through the video.

            Often known as quartiles when four equaly spread event points.
          type: array
          items:
            type: number
            minimum: 0
            maximum: 1
    AppConfigSubscription:
      type: object
      additionalProperties: false
      properties:
        plans:
          description: The available public plans a user can subscribe to.
          type: array
          items:
            $ref: "#/components/schemas/Plan"
    Bookmark:
      emoji: 🔖
      type: object
      required:
        - itemId
        - creationDate
      additionalProperties: false
      properties:
        itemId:
          description: The id of the item bookmarked.
          type: string
        creationDate:
          description: The date the bookmark was created.
          type: string
          format: date-time
    ChangePasswordRequest:
      type: object
      required:
        - password
      additionalProperties: false
      properties:
        password:
          description: The new password for the account.
          type: string
    ChangePinRequest:
      type: object
      required:
        - pin
      additionalProperties: false
      properties:
        pin:
          description: The new pin to set.
          type: string
    Classification:
      allOf:
        - $ref: "#/components/schemas/ClassificationSummary"
        - type: object
          required:
            - level
            - system
            - images
          properties:
            advisoryText:
              description: Parental advisort text.
              type: string
            level:
              description: >
                The level of this classification when compared with its
                siblings.

                A higher level means a greater restriction.

                Each classification in a system should have a unique level.
              type: integer
              format: int32
            system:
              description: The parent system code of the classification.
              type: string
            images:
              type: object
              additionalProperties:
                type: string
                format: uri
    ClassificationSummary:
      emoji: 🔞
      type: object
      required:
        - code
        - name
      properties:
        code:
          description: The unique code for a classification.
          type: string
        name:
          description: The name of the classification for display.
          type: string
    Credit:
      allOf:
        - $ref: "#/components/schemas/Person"
        - type: object
          required:
            - role
          properties:
            role:
              description: The type of role the credit performed, e.g. actor.
              type: string
              enum:
                - actor
                - associateproducer
                - coactor
                - director
                - executiveproducer
                - filminglocation
                - guest
                - narrator
                - other
                - presenter
                - producer
                - productmanager
                - thememusicby
                - voice
                - writer
            character:
              description: The name of the character.
              type: string
    Device:
      emoji: 📱
      type: object
      required:
        - id
        - name
        - registrationDate
        - type
      additionalProperties: false
      properties:
        id:
          description: The unique identifier for this device e.g. serial number.
          type: string
        name:
          description: The human recognisable name for this device.
          type: string
        registrationDate:
          description: The date this device was registered.
          type: string
          format: date-time
        type:
          description: The device type e.g. web_browser.
          type: string
    DeviceRegistrationRequest:
      type: object
      required:
        - id
        - name
        - type
      additionalProperties: false
      properties:
        id:
          description: The unique identifier for this device e.g. serial number.
          type: string
        name:
          description: A human recognisable name for this device.
          type: string
        type:
          description: The device type e.g. web_browser.
          type: string
    DeviceRegistrationWindow:
      type: object
      required:
        - periodDays
        - limit
        - remaining
        - startDate
        - endDate
      additionalProperties: false
      properties:
        periodDays:
          description: The number of days a de/registration period runs for.
          type: integer
          format: int32
        limit:
          description: The maximum de/registrations that can be made in a period.
          type: integer
          format: int32
        remaining:
          description: The remaining de/registrations that can be made in the current
            period.
          type: integer
          format: int32
        startDate:
          description: >
            The start date of the current period.


            This is based on the earliest device de/registrations in the past N days, where

            N is defined by `periodDays`.


            If no device has been de/registered then start date will be from the current date.
          type: string
          format: date-time
        endDate:
          description: >
            The end date of the current period.


            This is based on the value of `startDate` plus the number of days defined by  `periodDays`.
          type: string
          format: date-time
    Entitlement:
      allOf:
        - $ref: "#/components/schemas/OfferRights"
        - emoji: 🎟
          type: object
          properties:
            activationDate:
              description: The date of activation. If no date is defined the entitlement
                has not be activated.
              type: string
              format: date-time
            expirationDate:
              description: The date the entitlement expires.
              type: string
              format: date-time
            creationDate:
              description: The date the entitlement was created.
              type: string
              format: date-time
            playCount:
              description: How many times the media has been played.
              type: integer
              format: int32
            remainingDownloads:
              description: How many more downloads of this media are available.
              type: integer
              format: int32
            itemId:
              description: The id of the item this entitlement is for.
              type: string
            itemType:
              description: The type of item this entitlement is for.
              type: string
              enum:
                - movie
                - show
                - season
                - episode
                - program
                - link
                - trailer
                - channel
              enumEmoji:
                movie: 🎬
                show: 📺
                season: 📺
                episode: 📺
                program: 🎟
                link: 🔗
                trailer: 🖥
                channel: 📺
            mediaDuration:
              description: The duration of the entitled media.
              type: integer
              format: int32
            classification:
              description: The classification of the entitled item.
              $ref: "#/components/schemas/ClassificationSummary"
    ExclusionRule:
      emoji: ⛔️
      type: object
      description: Defines playback exclusion rules for an Offer or Entitlement.
      additionalProperties: false
      properties:
        description:
          type: string
        device:
          description: The device type that the exclusion rules apply to.
          type: string
        excludeAirplay:
          description: Prevent airplay from an apple device.
          type: boolean
        excludeChromecast:
          description: Prevent chromecasting.
          type: boolean
        excludeDelivery:
          type: string
          enum:
            - Stream
            - Download
            - StreamOrDownload
            - ProgressiveDownload
            - None
        excludeMinResolution:
          type: string
          enum:
            - SD
            - HD-720
            - HD-1080
            - Unknown
    ItemCustomMetadata:
      type: object
      description: Custom metadata associated with an item.
      required:
        - name
        - value
      properties:
        name:
          description: The name of the custom metadata.
          type: string
        value:
          description: The value of the custom metadata.
          type: string
    ItemDetail:
      allOf:
        - $ref: "#/components/schemas/ItemSummary"
        - type: object
          properties:
            advisoryText:
              description: Advisory text about this item, related to the classification
              type: string
            copyright:
              description: Copyright information about this item
              type: string
            distributor:
              description: The distributor of this item.
              type: string
            description:
              description: The description of this item.
              type: string
            episodeName:
              description: The full name of an episode.
              type: string
            customMetadata:
              description: |
                An ordered list of custom name-value-pair item metadata.

                Usually displayed on an item detail page.
              type: array
              items:
                $ref: "#/components/schemas/ItemCustomMetadata"
            genrePaths:
              description: >
                An array of genre paths mapping to the values within the
                `genres` array from ItemSummary.
              type: array
              items:
                type: string
            location:
              description: |
                The optional location (e.g. city) of an event.
                Specific to a Program item type.
              type: string
            venue:
              description: |
                The optional venue of an event.
                Specific to a Program item type.
              type: string
            eventDate:
              description: |
                The optional date of an event.
                Specific to a Program item type.
              type: string
              format: date-time
            credits:
              description: A list of credits associated with this item.
              type: array
              items:
                $ref: "#/components/schemas/Credit"
            seasons:
              description: A list of seasons associated with this item.
              $ref: "#/components/schemas/ItemList"
            episodes:
              description: A list of episodes associated with this item.
              $ref: "#/components/schemas/ItemList"
            season:
              description: The season associated with this item.
              $ref: "#/components/schemas/ItemDetail"
            show:
              description: The season associated with this item.
              $ref: "#/components/schemas/ItemDetail"
            totalUserRatings:
              description: The total number of users who have rated this item.
              type: number
              format: int32
              minimum: 0
            trailers:
              description: A list of trailers associated with this item.
              type: array
              items:
                $ref: "#/components/schemas/ItemSummary"
    ItemList:
      emoji: 📚
      type: object
      required:
        - id
        - size
        - items
        - paging
        - path
      description: A pageable list of items.
      additionalProperties: false
      properties:
        id:
          type: string
          description: The id of this list
        title:
          type: string
          description: The title of this list
        description:
          type: string
          description: A full description of this list.
        shortDescription:
          type: string
          description: A short description of this list.
        tagline:
          type: string
          description: The tagline of the item.
        path:
          type: string
          description: The path of this list
        itemTypes:
          type: array
          description: The types of items in the list
          items:
            type: string
            enum:
              - movie
              - show
              - season
              - episode
              - program
              - link
              - trailer
              - channel
            enumEmoji:
              movie: 🎬
              show: 📺
              season: 📺
              episode: 📺
              program: 🎟
              link: 🔗
              trailer: 🖥
              channel: 📺
        size:
          type: integer
          format: int32
          description: The total size of the list
        items:
          type: array
          description: A list of items
          items:
            $ref: "#/components/schemas/ItemSummary"
        images:
          type: object
          additionalProperties:
            type: string
            format: uri
        parameter:
          type: string
          description: >-
            If this list is parameterized, then this contains the parameter of
            the list in the format `name:value`.

            For example the Movies Genre list will take a parameter `genre` with a given value. e.g. `genre:action` or `genre:drama`.
        paging:
          description: Metadata describing how to load the next or previous page of the list
          $ref: "#/components/schemas/Pagination"
        customFields:
          description: A map of custom fields defined by a curator for a list.
          type: object
          additionalProperties: true
    ItemSchedule:
      emoji: ⏳
      type: object
      required:
        - id
        - channelId
        - startDate
        - endDate
      additionalProperties: false
      properties:
        id:
          type: string
        channelId:
          decription: The id of the channel item this schedule belongs to.
          type: string
        startDate:
          description: The date and time this schedule starts.
          type: string
          format: date-time
        endDate:
          description: The date and time this schedule ends.
          type: string
          format: date-time
        repeat:
          description: True if this has been aired previously on the same channel.
          type: boolean
        live:
          description: True if this is a live event.
          type: boolean
        featured:
          description: True if this is a featured item schedule.
          type: boolean
        item:
          description: The item this schedule targets.
          $ref: "#/components/schemas/ItemSummary"
    ItemScheduleList:
      type: object
      required:
        - channelId
        - startDate
        - endDate
        - schedules
      additionalProperties: false
      properties:
        channelId:
          description: The id of the channel the schedules belong to.
          type: string
        startDate:
          description: The date and time this list of schedules starts.
          type: string
          format: date-time
        endDate:
          description: The date and time this list of schedules ends.
          type: string
          format: date-time
        schedules:
          description: The list of item schedules.
          type: array
          items:
            $ref: "#/components/schemas/ItemSchedule"
    ItemSummary:
      emoji: 📘
      type: object
      required:
        - id
        - type
        - path
        - title
      discriminator:
        propertyName: type
      properties:
        id:
          description: Unique identifier for an Item
          type: string
        type:
          description: The type of item
          type: string
          enum:
            - movie
            - show
            - season
            - episode
            - program
            - link
            - trailer
            - channel
          enumEmoji:
            movie: 🎬
            show: 📺
            season: 📺
            episode: 📺
            program: 🎟
            link: 🔗
            trailer: 🖥
            channel: 📺
        title:
          description: The display title of the item.
          type: string
        contextualTitle:
          description: |
            A contextually relative title to display after a parent title.
            Mostly applicable to Season, Episode and Trailer.
          type: string
        shortDescription:
          description: A truncated description of the item
          type: string
        tagline:
          description: The tagline of the item
          type: string
        classification:
          description: The classification rating of this item.
          $ref: "#/components/schemas/ClassificationSummary"
        path:
          description: The path to the detail page of this item. Can be used to load the
            item detail page via the /page endpoint.
          type: string
        watchPath:
          description: The path to watch this item, if the item is a watchable type, e.g. a
            `movie`, `program` and `episode`.
          type: string
        scopes:
          description: The scopes for this item
          type: array
          items:
            type: string
        releaseYear:
          description: The year this item was released
          type: integer
          format: int32
        episodeCount:
          description: The number of episodes in the season, if the item is a season.
          type: integer
          format: int32
        availableEpisodeCount:
          description: The number of available episodes in the season, if the item is a
            season.
          type: integer
          format: int32
        availableSeasonCount:
          description: The number of available seasons in the show, if the item is a show.
          type: integer
          format: int32
        seasonNumber:
          description: The number of a season, if the item is a season.
          type: integer
          format: int32
        episodeNumber:
          description: The number of an episode, if the item is an episode.
          type: integer
          format: int32
        showId:
          description: The identifier of the show this item belongs to, if the item is a
            season or episode.
          type: string
        seasonId:
          description: The identifier of the season this item belongs to, if the item is an
            episode.
          type: string
        hasClosedCaptions:
          description: Whether closed captioning is available.
          type: boolean
        averageUserRating:
          description: The average user rating.
          type: number
          format: int32
          minimum: 0
        badge:
          description: The badge this item has.
          type: string
        genres:
          description: The array of genres this item belongs to.
          type: array
          items:
            type: string
        duration:
          description: The duration of the media in seconds.
          type: integer
          format: int32
          minimum: 0
        customId:
          description: |
            A custom identifier for this item.
            For example the id for this item under a different content system.
          type: string
        offers:
          description: The array of available offers for this item.
          type: array
          items:
            $ref: "#/components/schemas/Offer"
        images:
          type: object
          additionalProperties:
            type: string
            format: uri
        customFields:
          description: A map of custom fields defined by a curator for an item.
          type: object
          additionalProperties: true
    MediaFile:
      emoji: 📀
      type: object
      required:
        - name
        - deliveryType
        - url
        - drm
        - format
        - resolution
        - width
        - height
        - language
      additionalProperties: false
      properties:
        name:
          description: The name of the media file.
          type: string
        deliveryType:
          description: The way in which the media file is delivered.
          type: string
          enum:
            - Stream
            - Progressive
            - Download
        url:
          description: The url to access the media file.
          type: string
          format: uri
        drm:
          description: The type of drm used to encrypt the media. 'None' if unencrypted.
          type: string
        format:
          description: The format the media was encoded in.
          type: string
        resolution:
          description: The resolution of the video media.
          type: string
          enum:
            - SD
            - HD-720
            - HD-1080
            - Unknown
        width:
          description: The width of the video media.
          type: integer
          format: int32
        height:
          description: The height of the video media.
          type: integer
          format: int32
        channels:
          description: The number of audio channels.
          type: integer
          format: int32
        language:
          description: The language code for the media, e.g. 'en'.
          type: string
    NavContent:
      type: object
      properties:
        title:
          description: The title of the embedded navigation content.
          type: string
        list:
          description: An embedded list.
          $ref: "#/components/schemas/ItemList"
        imageType:
          description: |
            The image type to target when rendering items of the list.

            e.g wallpaper, poster, hero3x1, logo.
          type: string
    NavEntry:
      type: object
      additionalProperties: false
      properties:
        label:
          description: The text label for this nav entry.
          type: string
        path:
          description: >
            The path this nav entry links to.

            May be undefined if the nav entry is not clickable e.g. a nav heading.

            If the value begins with `http` then it's an external url.
          type: string
        content:
          description: Embedded content to display in a navigation menu.
          $ref: "#/components/schemas/NavContent"
        children:
          description: Child nav entries.
          type: array
          items:
            $ref: "#/components/schemas/NavEntry"
        featured:
          description: >
            True if this is a featured menu item.


            Featured menu items may have a more prominent presentation than others in the navigation.
          type: boolean
        customFields:
          description: A map of custom fields defined by a curator for a nav entry.
          type: object
          additionalProperties: true
    Navigation:
      type: object
      required:
        - header
      additionalProperties: false
      properties:
        header:
          description: The header navigation.
          type: array
          items:
            $ref: "#/components/schemas/NavEntry"
        footer:
          description: The footer navigation.
          $ref: "#/components/schemas/NavEntry"
        account:
          description: The account navigation.
          $ref: "#/components/schemas/NavEntry"
        copyright:
          description: Copyright information.
          type: string
        customFields:
          description: A map of custom fields defined by a curator for navigation.
          type: object
          additionalProperties: true
    Offer:
      allOf:
        - $ref: "#/components/schemas/OfferRights"
        - emoji: 💰
          type: object
          required:
            - price
            - availability
          properties:
            name:
              type: string
            price:
              type: number
              format: float
            startDate:
              type: string
              format: date-time
            endDate:
              type: string
              format: date-time
            availability:
              type: string
              enum:
                - Available
                - ComingSoon
            subscriptionCode:
              description: The code of the subscription this offer is offered under, if any.
              type: string
    OfferRights:
      emoji: 🎟
      type: object
      description: The base type for both Offer and Entitlement.
      required:
        - deliveryType
        - scopes
        - resolution
        - ownership
      properties:
        deliveryType:
          type: string
          enum:
            - Stream
            - Download
            - StreamOrDownload
            - ProgressiveDownload
            - None
        scopes:
          type: array
          items:
            type: string
        resolution:
          type: string
          enum:
            - SD
            - HD-720
            - HD-1080
            - Unknown
        ownership:
          type: string
          enum:
            - Subscription
            - Free
            - Rent
            - Own
            - None
        maxPlays:
          type: integer
          format: int32
          description: The maximum number of allowed plays.
        maxDownloads:
          type: integer
          format: int32
          description: The maximum number of allowed downloads.
        rentalPeriod:
          type: integer
          format: int32
          description: The length of time in minutes which the rental will last once
            purchased.
        playPeriod:
          type: integer
          format: int32
          description: The length of time in minutes which the rental will last once played
            for the first time.
        exclusionRules:
          type: array
          description: Any specific playback exclusion rules.
          items:
            $ref: "#/components/schemas/ExclusionRule"
    Page:
      allOf:
        - $ref: "#/components/schemas/PageSummary"
        - type: object
          required:
            - entries
          properties:
            metadata:
              $ref: "#/components/schemas/PageMetadata"
            entries:
              description: Entries of a page
              type: array
              items:
                $ref: "#/components/schemas/PageEntry"
            customFields:
              description: A map of custom fields defined by a curator for a page.
              type: object
              additionalProperties: true
            item:
              description: |
                When the page represents the detail of an item this property will contain the item detail.
      
                For clients consuming an item detail page, any page row entry of type `ItemDetailEntry`
                should look to obtain its data from the contents of this property.
      
                *Note that you have to be using feature flag `idp` to enable this
                on item detail pages. See `feature-flags.md` for further details.*
              $ref: "#/components/schemas/ItemDetail"
            list:
              description: |
                When the page represents the detail of a List this property will contain the list in question.
      
                For clients consuming a list detail page, any page row entry of type `ListDetailEntry`
                should look to obtain its data from the contents of this property.
      
                *Note that you have to be using feature flag `ldp` to enable this
                on list detail pages. See `feature-flags.md` for further details.*
              $ref: "#/components/schemas/ItemList"
    PageEntry:
      emoji: 📑
      type: object
      required:
        - id
        - type
        - title
        - template
      description: >
        Represents an entry of a Page.

        Defines what specific piece of content should be presented e.g. an Item or ItemList.

        Also defines what visual template should be used to render that content.
      additionalProperties: false
      properties:
        id:
          type: string
          description: The unique identifier for a page entry.
        type:
          type: string
          description: The type of PageEntry. Used to help identify what type of content
            will be presented.
          enum:
            - ItemEntry
            - ItemDetailEntry
            - ListEntry
            - ListDetailEntry
            - UserEntry
            - TextEntry
            - ImageEntry
            - CustomEntry
            - PeopleEntry
          enumEmoji:
            ItemEntry: 📘
            ItemDetailEntry: 📘
            ListEntry: 📚
            ListDetailEntry: 📚
            UserEntry: 👤
            TextEntry: 📝
            ImageEntry: 🌅
            CustomEntry: ⚙️
            PeopleEntry: 👱
        title:
          description: The name of the Page Entry.
          type: string
        template:
          description: Template type used to present the content of the PageEntry.
          type: string
        item:
          description: If 'type' is 'ItemEntry' then this is the item to be represented.
          $ref: "#/components/schemas/ItemSummary"
        list:
          description: If 'type' is 'ListEntry' or 'UserEntry' then this is the list to be represented.
          $ref: "#/components/schemas/ItemList"
        text:
          description: If 'type' is 'TextEntry' then this is the text to be represented.
          type: string
        people:
          description: If 'type' is 'PeopleEntry' then this is the array of people to
            present.
          type: array
          items:
            $ref: "#/components/schemas/Person"
        customFields:
          description: A map of custom fields defined by a curator for a page entry.
          type: object
          additionalProperties: true
        images:
          description: |
            The images for the page entry if any.

            For example the images of an `ImageEntry`.
          type: object
          additionalProperties:
            type: string
            format: uri
    PageMetadata:
      type: object
      description: Metadata associated with a page. Primarily intended for SEO usage.
      additionalProperties: false
      properties:
        description:
          type: string
        keywords:
          type: array
          items:
            type: string
    PageSummary:
      emoji: 📃
      type: object
      required:
        - id
        - path
        - title
        - template
        - isStatic
        - isSystemPage
      properties:
        id:
          description: Unique identifier for the page.
          type: string
        title:
          description: Title of the page.
          type: string
        path:
          description: Unique path for the page.
          type: string
        key:
          description: Key used to lookup a known page.
          type: string
        template:
          description: Identifier for of the page template to render this page.
          type: string
        isStatic:
          description: >
            True if this page is static and doesn't have any dynamic content to
            load.


            Static pages don't need to go back to the page endpoint to load page content

            instead the page summary loaded with the sitemap should be enough to determine

            the page template type and render based on this.
          type: boolean
        isSystemPage:
          deprecated: Replaced with isStatic
          description: >
            True if this page is a system page type.


            **DEPRECATED** This property doesn't have any real use in client applications

            anymore so shouldn't be used. It especially shouldn't be used to determine if

            a page is static or not. Use the `isStatic` property instead.
          type: boolean
    Pagination:
      type: object
      required:
        - total
        - page
      additionalProperties: false
      properties:
        next:
          description: Path to load next page of data, or null if not available
          type: string
        previous:
          description: Path to load previous page of data, or null if not available.
          type: string
        page:
          description: >
            The current page number.


            A value of 0 indicates that the fist page has not yet been loaded. This is

            useful when wanting to return the paging metadata to indicate how to

            load in the first page.
          type: integer
          format: int32
          minimum: 0
        size:
          description: >
            The current page size.


            A value of -1 indicates that the size has not yet been determined. This may

            arise when embedding secure list pagination info in a page which must be cached

            by a CDN. For example a Bookmarks list.
          type: integer
          format: int3
          minimum: -1
        total:
          description: >
            The total number of pages available given the current page size.


            A value of -1 indicates that the total has not yet been determined. This may

            arise when embedding secure list pagination info in a page which must be cached

            by a CDN. For example a Bookmarks list.
          type: integer
          format: int32
          minimum: -1
        authorization:
          description: |
            The authorization requirements to load a page of items.
      
            This will only be present on lists which are protected by some form
            of authorization token e.g. Bookmarks, Watched, Entitlements.
          $ref: "#/components/schemas/PaginationAuth"
        options:
          description: |
            Any active list sort and filter options.
      
            If an option has a default value then it won't be defined.
          $ref: "#/components/schemas/PaginationOptions"
    PaginationAuth:
      type: object
      required:
        - type
        - scope
      properties:
        type:
          description: The token type required to load the list.
          type: string
          enum:
            - UserAccount
            - UserProfile
        scope:
          description: The token scope required.
          type: string
          enum:
            - Catalog
            - Commerce
            - Settings
    PaginationOptions:
      type: object
      additionalProperties: false
      properties:
        pageSize:
          description: The number of items to return in a list page.
          type: integer
          format: int32
        order:
          description: The applied sort order if any.
          type: string
          enum:
            - asc
            - desc
        orderBy:
          description: The applied sort ordering property if any.
          type: string
          enum:
            - a-z
            - release-year
            - date-added
        maxRating:
          description: The maximum rating (inclusive) of items returned, e.g. 'AUOFLC-PG'.
          type: string
        itemType:
          description: Specific item type filter.
          type: string
          enum:
            - movie
            - show
            - season
            - episode
            - program
            - link
            - trailer
            - channel
          enumEmoji:
            movie: 🎬
            show: 📺
            season: 📺
            episode: 📺
            program: 🎟
            link: 🔗
            trailer: 🖥
            channel: 📺
    PasswordResetEmailRequest:
      type: object
      required:
        - email
      additionalProperties: false
      properties:
        email:
          description: The email address of the primary account profile to reset the
            password for.
          type: string
    PasswordResetRequest:
      type: object
      required:
        - email
        - password
      additionalProperties: false
      properties:
        email:
          description: The email address of the primary account profile to reset the
            password for.
          type: string
        password:
          description: The new password for the primary account profile.
          type: string
    Person:
      emoji: 👱
      type: object
      required:
        - name
        - path
      properties:
        name:
          description: The name of the person.
          type: string
        path:
          description: The path to the person
          type: string
    Plan:
      emoji: 💳
      type: object
      required:
        - id
        - title
        - tagline
        - type
        - isFeatured
        - isActive
        - isPrivate
        - revenueType
        - subscriptionCode
        - alias
        - benefits
        - billingPeriodType
        - billingPeriodFrequency
        - hasTrialPeriod
        - trialPeriodDays
        - termsAndConditions
        - currency
      additionalProperties: false
      properties:
        id:
          description: The identifier of a plan.
          type: string
        title:
          description: The title of a plan.
          type: string
        tagline:
          description: The short tagline for a plan.
          type: string
        type:
          description: The type of plan.
          type: string
          enum:
            - Free
            - Subscription
        isFeatured:
          description: True if a plan should be highlighted as featured, false if not.
          type: boolean
        isActive:
          description: True if a plan is active, false if its retired.
          type: boolean
        isPrivate:
          description: True if a plan should not be presented in the primary plan options,
            false if not.
          type: boolean
        revenueType:
          description: The revenue type a plan targets.
          type: string
          enum:
            - TVOD
            - SVOD
        subscriptionCode:
          description: The subscription code a plan targets.
          type: string
        alias:
          description: An alias for a plan.
          type: string
        benefits:
          description: The list of benefits to display for a plan.
          type: array
          items:
            type: string
        billingPeriodType:
          description: The type of billing period used.
          type: string
          enum:
            - week
            - month
            - year
            - none
        billingPeriodFrequency:
          description: Given the `billingPeriodType` this is how frequently it will run.
            e.g. every 2 weeks.
          type: integer
          format: int32
        hasTrialPeriod:
          description: True if a plan has a trial period, false if not.
          type: boolean
        trialPeriodDays:
          description: How many days a trial period runs for a plan. Only valid if
            `hasTrialPeriod` is true.
          type: integer
          format: int32
        termsAndConditions:
          description: The terms and conditions for a plan.
          type: string
        price:
          description: The price of a plan. If a free plan then undefined.
          type: number
          format: float
        currency:
          description: The currency a plan is offered in.
          type: string
        customFields:
          description: A map of custom fields defined by a curator for a plan.
          type: object
          additionalProperties: true
    ProfileCreationRequest:
      type: object
      required:
        - name
      additionalProperties: false
      properties:
        name:
          description: The unique name of the profile.
          type: string
          minLength: 1
        pinEnabled:
          description: |
            Whether an account pin is required to enter the profile.

            If no account pin is defined this has no impact.
          type: boolean
          default: false
        purchaseEnabled:
          description: Whether the profile can make purchases with the account payment
            options.
          type: boolean
          default: true
        segments:
          description: The segments a profile should be placed under
          type: array
          items:
            type: string
    ProfileDetail:
      allOf:
        - $ref: "#/components/schemas/ProfileSummary"
        - type: object
          required:
            - watched
            - rated
            - bookmarked
          properties:
            watched:
              description: A map of watched itemIds => last watched position
              type: object
              additionalProperties:
                $ref: "#/components/schemas/Watched"
            rated:
              description: A map of rated itemIds => rating out of 10
              type: object
              additionalProperties:
                type: integer
                format: int32
            bookmarked:
              description: A map of bookmarked itemIds => created date
              type: object
              additionalProperties:
                type: string
                format: date-time
    ProfileSummary:
      emoji: 👥
      type: object
      required:
        - id
        - name
        - isActive
        - pinEnabled
        - purchaseEnabled
        - marketingEnabled
        - segments
      properties:
        id:
          type: string
          description: The id of the profile.
        name:
          type: string
          description: The unique name of the profile.
        pinEnabled:
          type: boolean
          description: Whether a pin is required to enter the profile.
        purchaseEnabled:
          type: boolean
          description: Whether the profile can make purchases with the account payment
            options.
        segments:
          description: The segments a profile has been placed under
          type: array
          items:
            type: string
        isActive:
          deprecated: Inactive profiles are no longer returned
          type: boolean
          description: >
            Whether the profile is active or not.


            **DEPRECATED** - Always true. Inactive profiles are no longer returned.
        marketingEnabled:
          deprecated: Has moved to Account.marketingEnabled
          type: boolean
          description: >
            Whether the profile has opted in or out of marketing material.


            **DEPRECATED** - Marketing material is no longer tied to profiles, only account. See `Account.marketingEnabled`.
        maxRatingContentFilter:
          deprecated: Replaced with segmentation tags
          description: |
            The maximum rating (inclusive) of content to return in feeds.
      
            **DEPRECATED** - It's no longer recommended filtering content globally as apps can end up
            with pages without content, even the homepage. Instead using features like segmentation
            tags to target demographics like kids means content curation can be more thought out.
          $ref: "#/components/schemas/ClassificationSummary"
        minRatingPlaybackGuard:
          deprecated: Has moved to Account
          description: |
            The minumum rating (inclusive) of content where an account pin should be presented before entring playback.
      
            **DEPRECATED** - The playback guard is now defined at the account level, where an account
            pin also exists. This is then applied across all profiles.
          $ref: "#/components/schemas/ClassificationSummary"
    ProfileTokenRequest:
      type: object
      required:
        - profileId
        - scopes
      additionalProperties: false
      properties:
        profileId:
          description: The id of the profile the token should grant access rights to.
          type: string
        pin:
          description: The pin associated with this profile, if any.
          type: string
        scopes:
          description: The scope(s) of the token(s) required.
          type: array
          items:
            type: string
            enum:
              - Catalog
              - Commerce
              - Settings
    ProfileUpdateRequest:
      type: object
      additionalProperties: false
      properties:
        name:
          description: The unique name of the profile.
          type: string
          minLength: 1
        pinEnabled:
          description: |
            Whether an account pin is required to enter the profile.

            If no account pin is defined this has no impact.
          type: boolean
        purchaseEnabled:
          description: Whether the profile can make purchases with the account payment
            options.
          type: boolean
        segments:
          description: The segments a profile should be placed under
          type: array
          items:
            type: string
    RegistrationRequest:
      type: object
      required:
        - email
        - password
      additionalProperties: false
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        pin:
          description: The primary account pin.
          type: string
        marketing:
          description: Whether to receive marketing material or not. Default to true.
          type: boolean
          default: true
        segments:
          description: The segments to apply to the primary profile.
          type: array
          items:
            type: string
    SearchResults:
      emoji: 🔍
      type: object
      required:
        - term
        - total
      additionalProperties: false
      properties:
        term:
          description: The search term.
          type: string
        total:
          description: The total number of results.
          type: integer
          format: int32
          minimum: 0
        items:
          $ref: "#/components/schemas/ItemList"
        movies:
          $ref: "#/components/schemas/ItemList"
        tv:
          $ref: "#/components/schemas/ItemList"
        people:
          description: The list of people relevant to the search term.
          type: array
          items:
            $ref: "#/components/schemas/Person"
    ServiceError:
      emoji: 🔴
      type: object
      required:
        - message
      additionalProperties: false
      properties:
        message:
          type: string
          description: A description of the error.
        code:
          type: integer
          format: int32
          description: An optional code classifying the error. Should be taken in the
            context of the http status code.
    Subscription:
      emoji: 💳
      type: object
      required:
        - code
        - startDate
        - isTrialPeriod
        - planId
        - status
      additionalProperties: false
      properties:
        code:
          description: The unique subscription code.
          type: string
        startDate:
          description: The start date of a subscription.
          type: string
          format: date-time
        endDate:
          description: |
            The end date of a subscription.

            Some subscriptions may not have an end date, in which case this
            property will not exist.
          type: string
          format: date-time
        isTrialPeriod:
          description: True if a subscription is in its trial period, false if not.
          type: boolean
        planId:
          description: The plan a subscription belongs to.
          type: string
        status:
          description: The status of a subscription.
          type: string
          enum:
            - Active
            - Cancelled
            - Lapsed
            - Expired
            - None
    TokenRefreshRequest:
      type: object
      required:
        - token
      additionalProperties: false
      properties:
        token:
          description: The token to refresh.
          type: string
        cookieType:
          description: >
            If you specify a cookie type then a content filter cookie will be
            returned

            along with the token(s). This is only really intended for web based clients which

            need to pass the cookies to a server to render a page based on the users

            content filters, e.g subscription code.


            If type `Session` the cookie will be session based.

            If type `Persistent` the cookie will have a medium term lifespan.

            If undefined no cookies will be set.
          type: string
          enum:
            - Session
            - Persistent
    UserRating:
      emoji: ⭐️
      type: object
      required:
        - itemId
        - rating
      additionalProperties: false
      properties:
        itemId:
          type: string
          description: The id of the item rated.
        rating:
          description: The rating out of 10
          type: integer
          format: int32
          minimum: 1
          maximum: 10
    Watched:
      emoji: 👀
      type: object
      required:
        - position
        - firstWatchedDate
        - lastWatchedDate
      additionalProperties: false
      properties:
        itemId:
          description: The id of the item watched.
          type: string
        position:
          description: The last playhead position watched for the item.
          type: integer
          format: int32
        firstWatchedDate:
          type: string
          format: date-time
        lastWatchedDate:
          type: string
          format: date-time